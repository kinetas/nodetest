version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: gogi0529!
      MYSQL_DATABASE: mission

  nodetest:
    build: ./nodetest
    container_name: nodetest
    restart: always
    # ports:
    #   - "3000:3000"
    #   - "3001:3001"
    expose:
      - "3000"
    depends_on:
      - mysql
    env_file:
      - ./nodetest/.env


  rag_server:
    build: ./rag_server
    container_name: rag_server
    restart: always
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"
    depends_on:
      - chroma
      # - ollama
    volumes:
      - ./chroma-data:/chroma/chroma

  chroma:
    image: chromadb/chroma:0.5.0
    container_name: chroma
    ports:
      - "8001:8001"
    volumes:
      - ./chroma-data:/chroma/chroma
    environment:
    - IS_PERSISTENT=TRUE
    - ALLOW_RESET=TRUE
  # ollama:
  #   image: ollama/ollama
  #   container_name: ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama

  intent_server:
    build: ./intent_server
    container_name: intent_server
    # ports:
    #   - "8002:8002"
    expose:
      - "8002"
    volumes:
      - ./models/intent_model:/app/intent_model

    
  webRTC_server:
    image: webrtc-server
    build: ./webRTC_server  # FastAPI 기반 WebRTC 시그널링 서버
    container_name: webRTC_server
    restart: always
    ports:
      - "8500:8500"  # WebRTC 서버 포트 매핑
    depends_on:
      - turnserver
    volumes:
      - ./webRTC_server/SECRETE:/app/cert  # 인증서 파일 경로를 마운트
  turnserver:
    image: coturn/coturn
    network_mode: "host"
    container_name: turnserver
    restart: always
    env_file:
      - ./webRTC_server/.env
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "5349:5349/tcp"  # TLS 지원
    volumes:
      -  /home/gogi/docker/webRTC_server/turnserver/turnserver.conf:/etc/turnserver.conf
      - ./webRTC_server/SECRETE:/app/cert
    command: ["turnserver", "-c", "/etc/turnserver.conf", "--no-cli", "--verbose"]
  auth_server_1:
    build: ./auth_server
    container_name: auth_server_1
    expose:
      - "3000"
    env_file:
      - ./auth_server/.env
    depends_on:
      - mysql

  auth_server_2:
    build: ./auth_server
    container_name: auth_server_2
    expose:
      - "3000"
    env_file:
      - ./auth_server/.env
    depends_on:
      - mysql

  gateway:
    build: ./api_gateway
    container_name: api_gateway
    ports:
      - "3000:3000"  # 외부 노출은 오직 Gateway
    env_file:
      - ./api_gateway/.env
    depends_on:
      - auth_server_1
      - auth_server_2
      - nodetest
      - rag_server
      - intent_server



  # nodetest:
  #   build: ./nodetest
  #   container_name: nodetest
  #   expose:
  #     - "3000"
  #   env_file:
  #     - ./nodetest/.env
  #   depends_on:
  #     - mysql

  # rag_server:
  #   build: ./rag_server
  #   container_name: rag_server
  #   expose:
  #     - "8000"
  #   env_file:
  #     - ./rag_server/.env

  # intent_server:
  #   build: ./intent_server
  #   container_name: intent_server
  #   expose:
  #     - "8002"
  #   env_file:
  #     - ./intent_server/.env


  # 이건 nginx시에 만약 express기반 gateway를 쓴다면 사용안하는 코드
  # nginx: 
  #   image: nginx:latest
  #   container_name: nginx
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - auth_server_1
  #     - auth_server_2
  #     - nodetest
  #     - rag_server
  #     - intent_server

volumes:
  mysql-data:
  chroma-data:
  ollama_data: